{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { MultiAsset, TransactionOutputs, TransactionUnspentOutput } from '@emurgo/cardano-serialization-lib-asmjs'\nimport { Buffer } from 'buffer'\n\ntype Endpoints = {\n    isEnabled : () => Promise<boolean>,\n    enable : () => Promise<void>,\n    getAddress : () => Promise<string>,\n    getAddressHex : () => Promise<string>,\n    getRewardAddress : () => Promise<string>,\n    getRewardAddressHex : () => Promise<string>,\n    getNetworkId : () => Promise<{\n        id: number,\n        network: string\n    }>,\n    getUtxos: () => Promise<Utxo[]>,\n    getAssets: () => Promise<Asset[]>,\n    getUtxosHex: () => Promise<string[]>,\n    send: (data: Send) => Promise<string>,\n    sendMultiple: (data: SendMultiple) => Promise<string>,\n    // delegate: (data: Delegate) => Promise<string>,\n\n    auxiliary: Auxiliary\n}\n\ntype Delegate = {\n    poolId: string,\n    metadata?: any,\n    metadataLabel?: string\n}\n\ntype Utxo = {\n    txHash: string,\n    txId: number,\n    amount: Asset[]\n}\n\ntype Asset = {\n    unit: string,\n    quantity: string\n}\n\n\ntype Send = {\n    address: string,\n    amount?: number,\n    assets?: Asset[],\n    metadata?: any,\n    metadataLabel?: string\n}\n\ntype SendMultiple = {\n    recipients: {\n        address: string,\n        amount?: number,\n        assets?: Asset[]\n    }[],\n    metadata?: any,\n    metadataLabel?: string\n}\n\ntype ProtocolParameter = {\n  linearFee: {\n    minFeeA: string,\n    minFeeB: string,\n  },\n  minUtxo: '1000000',\n  poolDeposit: string,\n  keyDeposit: string,\n  maxTxSize: number,\n  slot: number,\n}\n\ntype Auxiliary = {\n    Buffer: object,\n    AsciiToBuffer: (string : string) => Buffer,\n    HexToBuffer: (string : string) => Buffer,\n    AsciiToHex: (string : string) => string,\n    HexToAscii: (string : string) => string,\n    BufferToAscii: (buffer : Buffer) => string,\n    BufferToHex: (buffer : Buffer) => string,\n}\n\n\nconst ERROR = {\n    FAILED_PROTOCOL_PARAMETER: 'Couldnt fetch protocol parameters from blockfrost',\n    TX_TOO_BIG: 'Transaction too big'\n}\n\nexport async function NamiWalletApi(NamiWalletObject: any, protocolParameterObject: ProtocolParameter, serializationLib?: any) : Promise<Endpoints> {\n    const S = serializationLib || await import('@emurgo/cardano-serialization-lib-asmjs')\n\n    const Buffer = (await import('buffer')).Buffer\n    const Nami = NamiWalletObject\n    const fetch = (await import('node-fetch')).default || window.fetch\n    const protocolParameter = protocolParameterObject;\n\n    const CoinSelection = (await import('./coinSelection')).default\n\n    async function isEnabled() : Promise<boolean>{\n        return await Nami.isEnabled()\n    }\n\n    async function enable() : Promise<void>{\n        if(!await isEnabled()) {\n            try {\n                await Nami.enable()\n            } catch (error) {\n                throw error\n            }\n        }\n    }\n\n    async function getAddress() : Promise<string>{\n        return S.Address.from_bytes(\n            Buffer.from(\n                await getAddressHex(),\n                'hex'\n            )\n        ).to_bech32()\n    }\n\n    async function getAddressHex() : Promise<string>{\n        return await Nami.getChangeAddress()\n    }\n\n    async function getRewardAddress() : Promise<string>{\n        return S.RewardAddress.from_address(\n            S.Address.from_bytes(\n                Buffer.from(\n                    await getRewardAddressHex(),\n                    'hex'\n                )\n            )\n        )?.to_address().to_bech32()\n    }\n\n    async function getRewardAddressHex() : Promise<string> {\n        return await Nami.getRewardAddress()\n    }\n\n    async function getNetworkId() : Promise<{id: number, network: string}>{\n        let networkId = await Nami.getNetworkId()\n        return {\n            id: networkId,\n            network: networkId == 1 ? 'mainnet' : 'testnet'\n        }\n    }\n\n    async function getUtxos() : Promise<Utxo[]> {\n        let Utxos = (await getUtxosHex()).map(u => S.TransactionUnspentOutput.from_bytes(\n                Buffer.from(\n                    u,\n                    'hex'\n                )\n            )\n        )\n        let UTXOS = []\n        for(let utxo of Utxos){\n            let assets = _utxoToAssets(utxo)\n\n            UTXOS.push({\n                txHash: Buffer.from(\n                    utxo.input().transaction_id().to_bytes(),\n                    'hex'\n                  ).toString('hex'),\n                txId: utxo.input().index(),\n                amount: assets\n            })\n        }\n        return UTXOS\n    }\n\n    async function getAssets() : Promise<Asset[]> {\n        let Utxos = await getUtxos()\n        let AssetsRaw : Asset[] = []\n        Utxos.forEach(u => {\n            AssetsRaw.push(...u.amount.filter(a => a.unit != 'lovelace'))\n        })\n        let AssetsMap : any = {}\n\n        for(let k of AssetsRaw){\n            let quantity = parseInt(k.quantity)\n            if(!AssetsMap[k.unit]) AssetsMap[k.unit] = 0\n            AssetsMap[k.unit] += quantity\n        }\n        return Object.keys(AssetsMap).map(k => ({unit: k, quantity: AssetsMap[k].toString()}))\n    }\n\n\n\n    async function getUtxosHex() : Promise<string[]> {\n        return await Nami.getUtxos()\n    }\n\n\n    async function send({address, amount = 0, assets = [], metadata = null, metadataLabel = '721'} : Send) : Promise<string> {\n        let PaymentAddress = await getAddress()\n\n        let utxos = (await getUtxosHex()).map(u => S.TransactionUnspentOutput.from_bytes(\n            Buffer.from(\n                u,\n                'hex'\n            )\n        ))\n\n        let lovelace = Math.floor(amount * 1000000).toString()\n\n        let ReceiveAddress = address\n\n\n        let multiAsset = _makeMultiAsset(assets)\n\n        let outputValue = S.Value.new(\n            S.BigNum.from_str(lovelace)\n        )\n\n        if(assets.length > 0)outputValue.set_multiasset(multiAsset)\n\n        let minAda = S.min_ada_required(\n            outputValue,\n            S.BigNum.from_str(protocolParameter.minUtxo || \"1000000\")\n        )\n        if(S.BigNum.from_str(lovelace).compare(minAda) < 0)outputValue.set_coin(minAda)\n\n\n        let outputs = S.TransactionOutputs.new()\n        outputs.add(\n            S.TransactionOutput.new(\n                S.Address.from_bech32(ReceiveAddress),\n                outputValue\n            )\n        )\n\n        let RawTransaction = _txBuilder({\n            PaymentAddress: PaymentAddress,\n            Utxos: utxos,\n            Outputs: outputs,\n            ProtocolParameter: protocolParameter,\n            Metadata: metadata,\n            MetadataLabel: metadataLabel,\n            Delegation: null\n        })\n\n        return await _signSubmitTx(RawTransaction)\n    }\n\n    async function sendMultiple({recipients = [], metadata = null, metadataLabel = '721'}: SendMultiple) : Promise<string> {\n        let PaymentAddress = await getAddress()\n\n        let utxos = (await getUtxosHex()).map(u => S.TransactionUnspentOutput.from_bytes(\n            Buffer.from(\n                u,\n                'hex'\n            )\n        ))\n\n        let outputs = S.TransactionOutputs.new()\n\n        for (let recipient of recipients){\n            let lovelace = Math.floor((recipient.amount || 0) * 1000000).toString()\n            let ReceiveAddress = recipient.address\n            let multiAsset = _makeMultiAsset(recipient.assets || [])\n\n            let outputValue = S.Value.new(\n                S.BigNum.from_str(lovelace)\n            )\n\n            if((recipient.assets || []).length > 0) outputValue.set_multiasset(multiAsset)\n\n            let minAda = S.min_ada_required(\n                outputValue,\n                S.BigNum.from_str(protocolParameter.minUtxo || \"1000000\")\n            )\n            if(S.BigNum.from_str(lovelace).compare(minAda) < 0)outputValue.set_coin(minAda)\n\n\n            outputs.add(\n                S.TransactionOutput.new(\n                    S.Address.from_bech32(ReceiveAddress),\n                    outputValue\n                )\n            )\n        }\n\n        let RawTransaction = _txBuilder({\n            PaymentAddress: PaymentAddress,\n            Utxos: utxos,\n            Outputs: outputs,\n            ProtocolParameter: protocolParameter,\n            Metadata: metadata,\n            MetadataLabel: metadataLabel,\n            Delegation: null\n        })\n\n        return await _signSubmitTx(RawTransaction)\n    }\n\n    // async function delegate({poolId, metadata = null, metadataLabel = '721'} : Delegate) : Promise<string>{\n\n    //     let stakeKeyHash = S.RewardAddress.from_address(\n    //         S.Address.from_bytes(\n    //             Buffer.from(\n    //                 await getRewardAddressHex(),\n    //                 'hex'\n    //             )\n    //         )\n    //     ).payment_cred().to_keyhash().to_bytes()\n\n    //     let delegation = await getDelegation(await getRewardAddress())\n\n    //     async function getDelegation(rewardAddr: string) : Promise<any>{\n    //         let stake = await _blockfrostRequest(`/accounts/${rewardAddr}`)\n    //         if(!stake || stake.error || !stake.pool_id) return {}\n\n    //         return {\n    //             active: stake.active,\n    //             rewards: stake.withdrawable_amount,\n    //             poolId: stake.pool_id,\n    //         }\n    //     }\n\n    //     let pool = await _blockfrostRequest(`/pools/${poolId}`)\n    //     let poolHex = pool.hex\n\n    //     let utxos = (await getUtxosHex()).map(u => S.TransactionUnspentOutput.from_bytes(Buffer.from(u, 'hex')))\n    //     let PaymentAddress = await getAddress()\n\n    //     let outputs = S.TransactionOutputs.new()\n    //     outputs.add(\n    //         S.TransactionOutput.new(\n    //           S.Address.from_bech32(PaymentAddress),\n    //           S.Value.new(\n    //               S.BigNum.from_str(protocolParameter.keyDeposit)\n    //           )\n    //         )\n    //     )\n\n    //     let transaction = _txBuilder({\n    //         PaymentAddress,\n    //         Utxos: utxos,\n    //         ProtocolParameter: protocolParameter,\n    //         Outputs: outputs,\n    //         Delegation: {\n    //             poolHex: poolHex,\n    //             stakeKeyHash: stakeKeyHash,\n    //             delegation: delegation\n    //         },\n    //         Metadata: metadata,\n    //         MetadataLabel: metadataLabel\n    //     })\n\n    //     let txHash = await _signSubmitTx(transaction)\n\n    //     return txHash\n    // }\n\n    async function signData(string : string) : Promise<string> {\n        let address = await getAddressHex()\n        let coseSign1Hex = await Nami.signData(\n            address,\n            Buffer.from(\n                string,\n                \"ascii\"\n            ).toString('hex')\n        )\n        return coseSign1Hex\n    }\n\n    //////////////////////////////////////////////////\n    //Auxiliary\n\n    function AsciiToBuffer(string : string) : Buffer{\n        return Buffer.from(string, \"ascii\")\n    }\n\n    function HexToBuffer(string: string) : Buffer{\n        return Buffer.from(string, \"hex\")\n    }\n\n    function AsciiToHex(string: string) : string{\n        return AsciiToBuffer(string).toString('hex')\n    }\n\n    function HexToAscii(string: string) : string{\n        return HexToBuffer(string).toString(\"ascii\")\n    }\n\n    function BufferToAscii(buffer: Buffer) : string{\n        return buffer.toString('ascii')\n    }\n\n    function BufferToHex(buffer: Buffer) : string{\n        return buffer.toString(\"hex\")\n    }\n\n\n\n    //////////////////////////////////////////////////\n\n    function _makeMultiAsset(assets : Asset[]) : MultiAsset{\n        let AssetsMap : any = {}\n        for(let asset of assets){\n            let [policy, assetName] = asset.unit.split('.')\n            let quantity = asset.quantity\n            if(!Array.isArray(AssetsMap[policy])){\n                AssetsMap[policy] = []\n            }\n            AssetsMap[policy].push({\n                \"unit\": Buffer.from(assetName, 'ascii').toString('hex'),\n                \"quantity\": quantity\n            })\n\n        }\n        let multiAsset = S.MultiAsset.new()\n        for(const policy in AssetsMap){\n\n            const ScriptHash = S.ScriptHash.from_bytes(\n                Buffer.from(policy,'hex')\n            )\n            const Assets = S.Assets.new()\n\n            const _assets = AssetsMap[policy]\n\n            for(const asset of _assets){\n                const AssetName = S.AssetName.new(Buffer.from(asset.unit,'hex'))\n                const BigNum = S.BigNum.from_str(asset.quantity)\n\n                Assets.insert(AssetName, BigNum)\n            }\n            multiAsset.insert(ScriptHash, Assets)\n        }\n        return multiAsset\n    }\n\n    function _utxoToAssets(utxo: TransactionUnspentOutput) : Asset[]{\n        let value : any = utxo.output().amount()\n        const assets = [];\n        assets.push({ unit: 'lovelace', quantity: value.coin().to_str() });\n        if (value.multiasset()) {\n            const multiAssets = value.multiasset().keys();\n            for (let j = 0; j < multiAssets.len(); j++) {\n            const policy = multiAssets.get(j);\n            const policyAssets = value.multiasset().get(policy);\n            const assetNames = policyAssets.keys();\n            for (let k = 0; k < assetNames.len(); k++) {\n                const policyAsset = assetNames.get(k);\n                const quantity = policyAssets.get(policyAsset);\n                const asset =\n                    Buffer.from(\n                        policy.to_bytes()\n                    ).toString('hex') + \".\" +\n                    Buffer.from(\n                        policyAsset.name()\n                    ).toString('ascii')\n\n\n                assets.push({\n                    unit: asset,\n                    quantity: quantity.to_str(),\n                });\n            }\n            }\n        }\n        return assets;\n    }\n\n    function _txBuilder({PaymentAddress, Utxos, Outputs, ProtocolParameter, Metadata = null, MetadataLabel = '721', Delegation = null} : {\n        PaymentAddress : string\n        Utxos : any,\n        Outputs : TransactionOutputs,\n        ProtocolParameter : ProtocolParameter,\n        Metadata? : any,\n        MetadataLabel?: string,\n        Delegation? : {\n            stakeKeyHash: string,\n            poolHex: string,\n            delegation: {\n                active: boolean,\n                rewards: string,\n                poolId: string\n            }\n        } | null\n    }) : Uint8Array {\n        const MULTIASSET_SIZE = 5000;\n        const VALUE_SIZE = 5000;\n        const totalAssets = 0\n        CoinSelection.setLoader(S)\n        CoinSelection.setProtocolParameters(\n            ProtocolParameter.minUtxo.toString(),\n            ProtocolParameter.linearFee.minFeeA.toString(),\n            ProtocolParameter.linearFee.minFeeB.toString(),\n            ProtocolParameter.maxTxSize.toString()\n        )\n        const selection = CoinSelection.randomImprove(\n            Utxos,\n            Outputs,\n            20 + totalAssets,\n            //ProtocolParameter.minUtxo.to_str()\n        )\n        const inputs = selection.input;\n        const txBuilder = S.TransactionBuilder.new(\n            S.LinearFee.new(\n                S.BigNum.from_str(ProtocolParameter.linearFee.minFeeA),\n                S.BigNum.from_str(ProtocolParameter.linearFee.minFeeB)\n            ),\n            S.BigNum.from_str(ProtocolParameter.minUtxo.toString()),\n            S.BigNum.from_str(ProtocolParameter.poolDeposit.toString()),\n            S.BigNum.from_str(ProtocolParameter.keyDeposit.toString()),\n            MULTIASSET_SIZE,\n            MULTIASSET_SIZE\n        );\n\n        for (let i = 0; i < inputs.length; i++) {\n            const utxo = inputs[i];\n            txBuilder.add_input(\n              utxo.output().address(),\n              utxo.input(),\n              utxo.output().amount()\n            );\n        }\n\n        if(Delegation){\n            let certificates = S.Certificates.new();\n            if (!Delegation.delegation.active){\n                certificates.add(\n                    S.Certificate.new_stake_registration(\n                        S.StakeRegistration.new(\n                            S.StakeCredential.from_keyhash(\n                                S.Ed25519KeyHash.from_bytes(\n                                    Buffer.from(Delegation.stakeKeyHash, 'hex')\n                                )\n                            )\n                        )\n                    )\n                )\n            }\n\n            let poolKeyHash = Delegation.poolHex\n            certificates.add(\n                S.Certificate.new_stake_delegation(\n                  S.StakeDelegation.new(\n                    S.StakeCredential.from_keyhash(\n                      S.Ed25519KeyHash.from_bytes(\n                        Buffer.from(Delegation.stakeKeyHash, 'hex')\n                      )\n                    ),\n                    S.Ed25519KeyHash.from_bytes(\n                      Buffer.from(poolKeyHash, 'hex')\n                    )\n                  )\n                )\n            );\n            txBuilder.set_certs(certificates)\n        }\n\n\n        let AUXILIARY_DATA\n        if(Metadata){\n            let METADATA = S.GeneralTransactionMetadata.new()\n            METADATA.insert(\n                S.BigNum.from_str(MetadataLabel),\n                S.encode_json_str_to_metadatum(\n                    JSON.stringify(Metadata),\n                    0\n                )\n            )\n            AUXILIARY_DATA = S.AuxiliaryData.new()\n            AUXILIARY_DATA.set_metadata(METADATA)\n            //const auxiliaryDataHash = S.hash_auxiliary_data(AUXILIARY_DATA)\n            txBuilder.set_auxiliary_data(AUXILIARY_DATA)\n        }\n\n        for(let i=0; i<Outputs.len(); i++){\n            txBuilder.add_output(Outputs.get(i))\n        }\n\n\n        const change = selection.change;\n        const changeMultiAssets = change.multiasset();\n        // check if change value is too big for single output\n        if (changeMultiAssets && change.to_bytes().length * 2 > VALUE_SIZE) {\n            const partialChange = S.Value.new(\n                S.BigNum.from_str('0')\n            );\n\n            const partialMultiAssets = S.MultiAsset.new();\n            const policies = changeMultiAssets.keys();\n            const makeSplit = () => {\n                for (let j = 0; j < changeMultiAssets.len(); j++) {\n                  const policy = policies.get(j);\n                  const policyAssets = changeMultiAssets.get(policy);\n                  const assetNames = policyAssets.keys();\n                  const assets = S.Assets.new();\n                  for (let k = 0; k < assetNames.len(); k++) {\n                    const policyAsset = assetNames.get(k);\n                    const quantity = policyAssets.get(policyAsset);\n                    assets.insert(policyAsset, quantity);\n                    //check size\n                    const checkMultiAssets = S.MultiAsset.from_bytes(\n                      partialMultiAssets.to_bytes()\n                    );\n                    checkMultiAssets.insert(policy, assets);\n                    const checkValue = S.Value.new(\n                      S.BigNum.from_str('0')\n                    );\n                    checkValue.set_multiasset(checkMultiAssets);\n                    if (\n                      checkValue.to_bytes().length * 2 >=\n                      VALUE_SIZE\n                    ) {\n                      partialMultiAssets.insert(policy, assets);\n                      return;\n                    }\n                  }\n                  partialMultiAssets.insert(policy, assets);\n                }\n              };\n\n            makeSplit();\n            partialChange.set_multiasset(partialMultiAssets);\n\n            const minAda = S.min_ada_required(\n                partialChange,\n                S.BigNum.from_str(ProtocolParameter.minUtxo)\n            );\n            partialChange.set_coin(minAda);\n\n            txBuilder.add_output(\n                S.TransactionOutput.new(\n                S.Address.from_bech32(PaymentAddress),\n                partialChange\n                )\n            );\n        }\n        txBuilder.add_change_if_needed(\n            S.Address.from_bech32(PaymentAddress)\n        );\n        const transaction = S.Transaction.new(\n            txBuilder.build(),\n            S.TransactionWitnessSet.new(),\n            AUXILIARY_DATA\n        )\n\n        const size = transaction.to_bytes().length * 2;\n        if (size > ProtocolParameter.maxTxSize) throw ERROR.TX_TOO_BIG;\n\n        return transaction.to_bytes()\n    }\n\n    async function _signSubmitTx(transactionRaw : Uint8Array) : Promise<string>{\n        let transaction = S.Transaction.from_bytes(transactionRaw)\n        const witneses = await Nami.signTx(\n            Buffer.from(\n                transaction.to_bytes()\n            ).toString('hex')\n        )\n\n        const signedTx = S.Transaction.new(\n            transaction.body(),\n            S.TransactionWitnessSet.from_bytes(\n                Buffer.from(\n                    witneses,\n                    \"hex\"\n                )\n            ),\n            transaction.auxiliary_data()\n        )\n\n        const txhash = await Nami.submitTx(\n            Buffer.from(\n                signedTx.to_bytes()\n            ).toString('hex')\n        )\n        return txhash\n\n    }\n    return {\n        isEnabled,\n        enable,\n        getAddress,\n        getAddressHex,\n        getRewardAddress,\n        getRewardAddressHex,\n        getNetworkId,\n        getUtxos,\n        getAssets,\n        getUtxosHex,\n        send,\n        sendMultiple,\n        auxiliary: {\n            Buffer: Buffer,\n            AsciiToBuffer: AsciiToBuffer,\n            HexToBuffer: HexToBuffer,\n            AsciiToHex: AsciiToHex,\n            HexToAscii: HexToAscii,\n            BufferToAscii: BufferToAscii,\n            BufferToHex: BufferToHex,\n        }\n    }\n}\n\n\n\n\n"],"names":[],"mappings":"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"}